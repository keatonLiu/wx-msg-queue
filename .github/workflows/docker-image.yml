name: Docker Image CI

on:
  push:
    branches:
      - 'main'

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

env:
  DOCKER_REGISTRY: registry.cn-hangzhou.aliyuncs.com
  SOURCE_COMPOSE_FILE: compose.yaml
  DEST_COMPOSE_DIR: "~/wx-msg-queue"
  HOST: api.vd.hitbing.asia

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/lxtxiaotong/wx-msg-queue:latest
          cache-from: type=gha
          cache-to: type=gha
          github-token: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    needs: publish
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: copy file via ssh
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ env.HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          key: ${{ secrets.DEPLOY_KEY }}
          source: ${{ env.SOURCE_COMPOSE_FILE }}
          target: ${{ env.DEST_COMPOSE_DIR }}
          debug: true

      - name: Deploy proxy-server docker container on all hosts
        uses: appleboy/ssh-action@v1.2.2
        with:
          debug: true
          host: ${{ env.HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          key: ${{ secrets.DEPLOY_KEY }}
          script: |
            echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin ${{ env.DOCKER_REGISTRY }}
            source /etc/bash.bashrc
            docker compose -f ${{ env.DEST_COMPOSE_DIR }}/${{ env.SOURCE_COMPOSE_FILE }} pull -q
            docker compose -f ${{ env.DEST_COMPOSE_DIR }}/${{ env.SOURCE_COMPOSE_FILE }} up -d --remove-orphans
            docker image prune -f
